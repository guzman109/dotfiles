# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.
# font_family      MonoLisa
# bold_font        MonoLisa Bold
# italic_font      MonoLisa Italic  
# bold_italic_font MonoLisa Bold Italic

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: +list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

font_size 14.0
#: Font size (in pts)

# force_ltr no

#: kitty does not support BIDI (bidirectional text), however, for RTL
#: scripts, words are automatically displayed in RTL. That is to say,
#: in an RTL script, the words "HELLO WORLD" display in kitty as
#: "WORLD HELLO", and if you try to select a substring of an RTL-
#: shaped string, you will get the character that would be there had
#: the the string been LTR. For example, assuming the Hebrew word
#: ירושלים, selecting the character that on the screen appears to be ם
#: actually writes into the selection buffer the character י.  kitty's
#: default behavior is useful in conjunction with a filter to reverse
#: the word order, however, if you wish to manipulate RTL glyphs, it
#: can be very challenging to work with, so this option is provided to
#: turn it off. Furthermore, this option can be used with the command
#: line program GNU FriBidi
#: <https://github.com/fribidi/fribidi#executable> to get BIDI
#: support, because it will force kitty to always treat the text as
#: LTR, which FriBidi expects for terminals.

#: symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name
symbol_map U+e000-U+e00a,U+ea60-U+ebeb,U+e0a0-U+e0c8,U+e0ca,U+e0cc-U+e0d4,U+e200-U+e2a9,U+e300-U+e3e3,U+e5fa-U+e6b1,U+e700-U+e7c5,U+f000-U+f2e0,U+f300-U+f372,U+f400-U+f532,U+f0001-U+f1af0 Symbols Nerd Font Mono


# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Usually, for Private Use Unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. Using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: This option can be specified multiple times. The syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

# Enable better font rendering and ligatures
disable_ligatures never
font_features MonoLisa-Regular +zero +ss04 +ss07 +ss08 +ss09
font_features MonoLisa-Bold +zero +ss04 +ss07 +ss08 +ss09
font_features MonoLisa-Italic +zero +ss04 +ss07 +ss08 +ss09
font_features MonoLisa-BoldItalic +zero +ss04 +ss07 +ss08 +ss09

# Better text rendering
text_composition_strategy platform
undercurl_style thick-sparse
#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them. You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features option.

# font_features
# font_features MonoLisa-Regular +zero +ss04 +ss07 +ss08 +ss09
# font_features MonoLisa-RegularItalic +zero +ss04 +ss07 +ss08 +ss09
#


# Clean up box-drawing corners only
# symbol_map U+250C,U+2510,U+2514,U+2518,U+251C,U+2524,U+252C,U+2534,U+253C Menlo

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. This
#: is useful as some fonts might have features worthwhile in a
#: terminal. For example, Fira Code includes a discretionary feature,
#: zero, which in that font changes the appearance of the zero (0), to
#: make it more easily distinguishable from Ø. Fira Code also includes
#: other discretionary features known as Stylistic Sets which have the
#: tags ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, font features are first read from the FontConfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use `kitty +list-fonts
#: --psnames`:

#: .. code-block:: sh

#:     $ kitty +list-fonts --psnames | grep Fira
#:     Fira Code
#:     Fira Code Bold (FiraCode-Bold)
#:     Fira Code Light (FiraCode-Light)
#:     Fira Code Medium (FiraCode-Medium)
#:     Fira Code Regular (FiraCode-Regular)
#:     Fira Code Retina (FiraCode-Retina)

#: The part in brackets is the PostScript name.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero in the bold font::

#:     font_features FiraCode-Bold +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

# modify_font

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.


#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.

#: }}}

#: Tab bar {{{

tab_bar_edge top

#: The edge to show the tab bar on, top or bottom.

tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts).

tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style powerline

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a mapping
#:     for the select_tab action which presents you with a list of tabs and
#:     allows for easy switching to a tab.
map super+tab  select_tab
tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator "󰄛 "

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

tab_powerline_style round

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

tab_activity_symbol none

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index useable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (not counting overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab (expensive,
#:     requires syscall).
#: max_title_length
#:     The maximum title length available.

#: Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.

active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.
# active_tab_foreground   #000
# active_tab_background   #eee
active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
inactive_tab_font_style normal

#: Tab bar colors and styles.
# tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.
# tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color.

#: }}}

#: Advanced {{{
editor nvim
macos_option_as_alt yes
macos_quit_when_last_window_closed yes
# modify_font thickness 0.2
# macos_thicken_font 0.1
map cmd+c       copy_to_clipboard
map cmd+v       paste_from_clipboard
#: Open tab from current directory
map ctrl+shift+y new_tab_with_cwd

# Claude Code multi-line prompt support
map shift+enter send_text all \x1b\r

# Vim-style navigation with Option key
map alt+h neighboring_window left
map alt+j neighboring_window down
map alt+k neighboring_window up
map alt+l neighboring_window right

# Vim-style scrolling
map alt+u scroll_page_up
map alt+d scroll_page_down
map alt+g scroll_home
map shift+alt+g scroll_end

# Enhanced color rendering
background_opacity 1.0
dynamic_background_opacity no

# Better contrast and color vibrancy
allow_remote_control yes
listen_on unix:/tmp/mykitty

# Performance settings for better rendering
repaint_delay 10
input_delay 3
sync_to_monitor yes


# BEGIN_KITTY_THEME
# Catppuccin-Latte
include current-theme.conf
# END_KITTY_THEME


# BEGIN_KITTY_FONTS
font_family      family=MonoLisa postscript_name=MonoLisa-Regular
bold_font        auto
italic_font      auto
bold_italic_font auto
# END_KITTY_FONTS
